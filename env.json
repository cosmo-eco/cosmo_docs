[
  {
    "Section_Desc": "This section provides functions for interacting with the console window, including clearing output, setting the title, and printing text.",
    "Section_Name": "Console Functions",
    "Funcs": [
      {
        "Func_Code": "function rconsoleclear(): ()",
        "Func_Description": "Clears the output of the console window.",
        "Func_Name": "Clear Console"
      },
      {
        "Func_Code": "function rconsolecreate(): ()",
        "Func_Description": "Opens the console window without clearing previous output.",
        "Func_Name": "Create Console"
      },
      {
        "Func_Code": "function rconsoledestroy(): ()",
        "Func_Description": "Closes the console window and clears its output, but retains the title.",
        "Func_Name": "Destroy Console"
      },
      {
        "Func_Code": "function rconsoleinput(): string",
        "Func_Description": "Waits for user input into the console window and returns the result.",
        "Func_Name": "Console Input"
      },
      {
        "Func_Code": "function rconsoleprint(text: string): ()",
        "Func_Description": "Prints the provided text to the console window without clearing previous output or adding a new line.",
        "Func_Name": "Print to Console"
      },
      {
        "Func_Code": "function rconsolesettitle(title: string): ()",
        "Func_Description": "Sets the title of the console window to the specified title.",
        "Func_Name": "Set Console Title"
      }
    ]
  },
  {
    "Section_Desc": "This section provides functions for modifying the internal Instance cache, allowing for invalidation, replacement, and comparison of cached Instances.",
    "Section_Name": "Cache Functions",
    "Funcs": [
      {
        "Func_Code": "function invalidate(object: Instance): ()",
        "Func_Description": "Deletes the object from the Instance cache, effectively invalidating it as a reference.",
        "Func_Name": "Invalidate Cache"
      },
      {
        "Func_Code": "function iscached(object: Instance): boolean",
        "Func_Description": "Checks whether the object exists in the Instance cache.",
        "Func_Name": "Is Cached"
      },
      {
        "Func_Code": "function replace(object: Instance, newObject: Instance): ()",
        "Func_Description": "Replaces the object in the Instance cache with a new object.",
        "Func_Name": "Replace in Cache"
      },
      {
        "Func_Code": "function cloneref(object: Instance): Instance",
        "Func_Description": "Returns a copy of the Instance reference to the object, useful for managing an Instance without directly referencing it.",
        "Func_Name": "Clone Reference"
      },
      {
        "Func_Code": "function compareinstances(a: Instance, b: Instance): boolean",
        "Func_Description": "Returns whether both objects reference the same Instance.",
        "Func_Name": "Compare Instances"
      }
    ]
  },
  {
    "Section_Desc": "This section provides functions for creating, identifying, and interacting with Luau closures, including checking caller information, cloning functions, and hooking closures.",
    "Section_Name": "Closure Functions",
    "Funcs": [
      {
        "Func_Code": "function checkcaller(): boolean",
        "Func_Description": "Returns whether the function currently running was called by the executor. Useful for hooks that behave differently when called by the game.",
        "Func_Name": "Check Caller"
      },
      {
        "Func_Code": "function clonefunction<T>(func: T): T",
        "Func_Description": "Generates a new closure based on the bytecode of the provided function.",
        "Func_Name": "Clone Function"
      },
      {
        "Func_Code": "function getcallingscript(): BaseScript",
        "Func_Description": "Returns the script responsible for the currently running function.",
        "Func_Name": "Get Calling Script"
      },
      {
        "Func_Code": "function hookfunction<T>(func: T, hook: function): T",
        "Func_Description": "Replaces the provided function with a hook, invoking the hook instead of the original function. Returns a new function to access the original.",
        "Func_Name": "Hook Function"
      },
      {
        "Func_Code": "function iscclosure(func: function): boolean",
        "Func_Description": "Returns whether the provided function is a C closure.",
        "Func_Name": "Is C Closure"
      },
      {
        "Func_Code": "function islclosure(func: function): boolean",
        "Func_Description": "Returns whether the provided function is a Luau closure.",
        "Func_Name": "Is Luau Closure"
      },
      {
        "Func_Code": "function isexecutorclosure(func: function): boolean",
        "Func_Description": "Returns whether the provided function was created by the executor.",
        "Func_Name": "Is Executor Closure"
      },
      {
        "Func_Code": "function loadstring(source: string, chunkname: string?): (function?, string?)",
        "Func_Description": "Compiles a source string into a function. Returns the function if successful, or an error message if there are compilation errors.",
        "Func_Name": "Load String"
      },
      {
        "Func_Code": "function newcclosure<T>(func: T): T",
        "Func_Description": "Wraps a function as a C closure, which may have different metadata but behaves identically.",
        "Func_Name": "New C Closure"
      }
    ]
  },
  {
    "Section_Desc": "This section provides functions for interacting with Luau constants in a function.",
    "Section_Name": "Debug Functions",
    "Funcs": [
      {
        "Func_Code": "function debug.getconstant(func: function | number, index: number): any",
        "Func_Description": "Returns the constant at index in the constant table of the function or level. Throws an error if the constant does not exist.",
        "Func_Name": "Get Constant"
      },
      {
        "Func_Code": "function debug.getconstants(func: function | number): {any}",
        "Func_Description": "Returns the constant table of the function or level.",
        "Func_Name": "Get Constants"
      },
      {
        "Func_Code": "function debug.getconstants(func: function | number): {any}",
        "Func_Description": "Returns the constant table of the function or level.",
        "Func_Name": "Get Constants"
      },
      {
        "Func_Code": "function debug.getinfo(func: function | number): DebugInfo",
        "Func_Description": "Returns debug-related information about a function.",
        "Func_Name": "Get Info"
      },
      {
        "Func_Code": "function debug.getproto(func: function | number, index: number, active: boolean?): function | {function}",
        "Func_Description": "Returns the proto at the specified index within the function or level func if active is false, or all active functions of the proto if active is true.",
        "Func_Name": "Get Proto"
      },
      {
        "Func_Code": "function debug.getprotos(func: function | number): {function}",
        "Func_Description": "Returns a list of the function or level func.",
        "Func_Name": "Get Protos"
      },
      {
        "Func_Code": "function debug.getstack(level: number, index: number?): any | {any}",
        "Func_Description": "Returns the value at the specified index in the stack frame level or the entire stack frame if no index is specified.",
        "Func_Name": "Get Stack"
      },
      {
        "Func_Code": "function debug.getupvalue(func: function | number, index: number): any",
        "Func_Description": "Returns the upvalue at index inside a function.",
        "Func_Name": "Get Upvalue"
      },
      {
        "Func_Code": "function debug.getupvalues(func: function | number): {any}",
        "Func_Description": "Returns a list of upvalues.",
        "Func_Name": "Get Upvalues"
      },
      {
        "Func_Code": "function debug.setconstant(func: function | number, index: number, value: any): ()",
        "Func_Description": "Sets the constant at the specified index in the function or level func to value.",
        "Func_Name": "Set Constant"
      },
      {
        "Func_Code": "function debug.setstack(level: number, index: number, value: any): ()",
        "Func_Description": "Sets the register at index in the stack frame level to value.",
        "Func_Name": "Set Stack"
      },
      {
        "Func_Code": "function debug.setupvalue(func: function | number, index: number, value: any): ()",
        "Func_Description": "Sets the upvalue at index in the function or level func to value.",
        "Func_Name": "Set Upvalue"
      }
    ]
  },
  {
    "Section_Desc": "This section contains functions for encryption and decryption, including Base64 encoding and decoding.",
    "Section_Name": "Crypt Functions",
    "Funcs": [
      {
        "Func_Code": "function crypt.base64encode(data: string): string",
        "Func_Description": "Encodes a string of bytes into Base64.",
        "Func_Name": "Base64 Encode"
      },
      {
        "Func_Code": "function crypt.base64decode(data: string): string",
        "Func_Description": "Decodes a Base64 string to a string of bytes.",
        "Func_Name": "Base64 Decode"
      },
      {
        "Func_Code": "function crypt.encrypt(data: string, key: string, iv: string?, mode: string?): (string, string)",
        "Func_Description": "Encrypts a plaintext string using AES encryption, returning both the encrypted, base64-encoded string and the Initialization Vector (IV). If no AES IV is provided, a random one will be generated and returned as a second base64-encoded string. Supported cipher modes include 'CBC', 'ECB', 'CTR', 'CFB', 'OFB', and 'GCM', with 'CBC' as the default..",
        "Func_Name": "Crypt Encrypt"
      },
      {
        "Func_Code": "function crypt.decrypt(data: string, key: string, iv: string, mode: string): string",
        "Func_Description": "Decrypts the base64 encoded and encrypted content. Returns the raw string. Supported cipher modes include 'CBC', 'ECB', 'CTR', 'CFB', 'OFB', and 'GCM'.",
        "Func_Name": "Crypt Decrypt"
      },
      {
        "Func_Code": "function crypt.generatebytes(size: number): string",
        "Func_Description": "Generates a random sequence of bytes of the given size. Returns the sequence as a base64 encoded string.",
        "Func_Name": "Generate Bytes"
      },
      {
        "Func_Code": "function crypt.generatekey(): string",
        "Func_Description": "Generates a base64 encoded 256-bit key. The result can be used as the second parameter for the crypt.encrypt and crypt.decrypt functions.",
        "Func_Name": "Generate Key"
      },
      {
        "Func_Code": "function crypt.hash(data: string, algorithm: string): string",
        "Func_Description": "Hashes the data using the specified algorithm, such as 'sha1', 'sha256', 'md5', or 'sha3-512'.",
        "Func_Name": "Hash"
      }
    ]
  },
  {
    "Section_Desc": "This section provides functions for file and folder operations within the executor's directory, allowing reading, writing, and listing files.",
    "Section_Name": "Filesystem Functions",
    "Funcs": [
      {
        "Func_Code": "function readfile(path: string): string",
        "Func_Description": "Returns the contents of the file located at the specified path.",
        "Func_Name": "Read File"
      },
      {
        "Func_Code": "function listfiles(path: string): {string}",
        "Func_Description": "Returns a list of files and folders in the specified folder. The returned list contains whole paths.",
        "Func_Name": "List Files"
      },
      {
        "Func_Code": "function writefile(path: string, content: string)",
        "Func_Description": "Writes the provided content to the file at the specified path.",
        "Func_Name": "Write File"
      },
      {
        "Func_Code": "function makefolder(path: string): ()",
        "Func_Description": "Creates a folder at the specified path if it does not already exist.",
        "Func_Name": "Make Folder"
      },
      {
        "Func_Code": "function appendfile(path: string, data: string): ()",
        "Func_Description": "Appends the specified data to the end of the file at the given path, creating the file if it doesn't exist.",
        "Func_Name": "Append File"
      },
      {
        "Func_Code": "function isfile(path: string): boolean",
        "Func_Description": "Checks if the specified path points to a file and returns true or false accordingly.",
        "Func_Name": "Is File"
      },
      {
        "Func_Code": "function isfolder(path: string): boolean",
        "Func_Description": "Checks if the specified path points to a folder and returns true or false accordingly.",
        "Func_Name": "Is Folder"
      },
      {
        "Func_Code": "function delfile(path: string): ()",
        "Func_Description": "Deletes the file located at the specified path.",
        "Func_Name": "Delete File"
      },
      {
        "Func_Code": "function delfolder(path: string): ()",
        "Func_Description": "Deletes the folder located at the specified path.",
        "Func_Name": "Delete Folder"
      },
      {
        "Func_Code": "function loadfile(path: string, chunkname: string?): (function?, string?)",
        "Func_Description": "Loads a chunk from the specified file path. If successful, returns the chunk; otherwise, returns nil and the error message. The optional chunkname is used in error messages.",
        "Func_Name": "Load File"
      },
      {
        "Func_Code": "function dofile(path: string): ()",
        "Func_Description": "Loads and executes the file located at the specified path on a new thread.",
        "Func_Name": "Do File"
      }
    ]
  },
  {
    "Section_Desc": "This section provides functions for drawing shapes and text above the game window.",
    "Section_Name": "Drawing Functions",
    "Funcs": [
      {
        "Func_Code": "function Drawing.new(type: string): Drawing",
        "Func_Description": "Creates a new drawing object of the specified type. Types include 'Line', 'Text', 'Image', 'Circle', 'Square', 'Quad', and 'Triangle'.",
        "Func_Name": "New Drawing"
      },
      {
        "Func_Code": "function cleardrawcache(): ()",
        "Func_Description": "Clears every drawing object from the cache, invalidating references to them.",
        "Func_Name": "Clear Draw Cache"
      },
      {
        "Func_Code": "function getrenderproperty(drawing: Drawing, property: string): any",
        "Func_Description": "Retrieves the value of a specified property from a drawing object.",
        "Func_Name": "Get Render Property"
      },
      {
        "Func_Code": "function isrenderobj(object: any): boolean",
        "Func_Description": "Checks if the provided object is a valid drawing object, returning true if valid.",
        "Func_Name": "Is Render Object"
      },
      {
        "Func_Code": "function setrenderproperty(drawing: Drawing, property: string, value: any): ()",
        "Func_Description": "Sets the specified property of a drawing object to the given value.",
        "Func_Name": "Set Render Property"
      }
    ]
  },
  {
    "Section_Desc": "This section provides functions for interacting with game objects (instances) and their properties.",
    "Section_Name": "Instance Functions",
    "Funcs": [
      {
        "Func_Code": "function fireclickdetector(object: ClickDetector, distance: number?, event: string?): ()",
        "Func_Description": "Dispatches a click or hover event to the given ClickDetector. The 'distance' defaults to zero, and 'event' defaults to 'MouseClick' if not provided.",
        "Func_Name": "Fire Click Detector"
      },
      {
        "Func_Code": "function getcallbackvalue(object: Instance, property: string): function?",
        "Func_Description": "Returns the function assigned to a callback property of the object, which cannot be indexed normally.",
        "Func_Name": "Get Callback Value"
      },
      {
        "Func_Code": "function getconnections(signal: RBXScriptSignal): {Connection}",
        "Func_Description": "Generates a list of Connection objects for all functions connected to a specified signal.",
        "Func_Name": "Get Connections"
      },
      {
        "Func_Code": "function getcustomasset(path: string, noCache: boolean): string",
        "Func_Description": "Returns an rbxasset:// content ID for an asset at the specified path, with optional caching.",
        "Func_Name": "Get Custom Asset"
      },
      {
        "Func_Code": "function gethiddenproperty(object: Instance, property: string): (any, boolean)",
        "Func_Description": "Retrieves the value of a hidden property on the specified object; returns true if the property is hidden.",
        "Func_Name": "Get Hidden Property"
      },
      {
        "Func_Code": "function gethui(): Folder",
        "Func_Description": "Returns a protected hidden GUI container, useful as an alternative to CoreGui and PlayerGui.",
        "Func_Name": "Get Hidden UI"
      },
      {
        "Func_Code": "function getinstances(): {Instance}",
        "Func_Description": "Returns a list of all instances referenced on the client.",
        "Func_Name": "Get Instances"
      },
      {
        "Func_Code": "function getnilinstances(): {Instance}",
        "Func_Description": "Returns instances that are not descendants of any service provider, such as objects that exist outside game services.",
        "Func_Name": "Get Nil Instances"
      },
      {
        "Func_Code": "function isscriptable(object: Instance, property: string): boolean",
        "Func_Description": "Determines if the specified property is scriptable and can be accessed normally.",
        "Func_Name": "Is Scriptable"
      },
      {
        "Func_Code": "function sethiddenproperty(object: Instance, property: string, value: any): boolean",
        "Func_Description": "Sets the value of a hidden property on the specified object, returning true if the property was hidden.",
        "Func_Name": "Set Hidden Property"
      },
      {
        "Func_Code": "function setrbxclipboard(data: string): boolean",
        "Func_Description": "Copies the specified model data to the Studio client's clipboard, enabling it to be pasted into Studio.",
        "Func_Name": "Set Roblox Clipboard"
      },
      {
        "Func_Code": "function setscriptable(object: Instance, property: string, value: boolean): boolean",
        "Func_Description": "Sets the scriptable status of a property and returns whether it was previously scriptable.",
        "Func_Name": "Set Scriptable"
      }
    ]
  },
  {
    "Section_Desc": "This section provides functions for simulating user inputs such as mouse clicks and key presses.",
    "Section_Name": "Input Functions",
    "Funcs": [
      {
        "Func_Code": "function isrbxactive(): boolean",
        "Func_Description": "Returns whether the game's window is in focus. Must be true for other input functions to work.",
        "Func_Name": "Is Active"
      },
      {
        "Func_Code": "function mouse1click(): ()",
        "Func_Description": "Dispatches a left mouse button click.",
        "Func_Name": "Mouse1 Click"
      },
      {
        "Func_Code": "function mouse1press(): ()",
        "Func_Description": "Dispatches a left mouse button press.",
        "Func_Name": "Mouse1 Press"
      },
      {
        "Func_Code": "function mouse1release(): ()",
        "Func_Description": "Dispatches a left mouse button release.",
        "Func_Name": "Mouse1 Release"
      },
      {
        "Func_Code": "function mouse2click(): ()",
        "Func_Description": "Dispatches a right mouse button click.",
        "Func_Name": "Mouse2 Click"
      },
      {
        "Func_Code": "function mouse2press(): ()",
        "Func_Description": "Dispatches a right mouse button press.",
        "Func_Name": "Mouse2 Press"
      },
      {
        "Func_Code": "function mouse2release(): ()",
        "Func_Description": "Dispatches a right mouse button release.",
        "Func_Name": "Mouse2 Release"
      },
      {
        "Func_Code": "function mousemoveabs(x: number, y: number): ()",
        "Func_Description": "Moves the mouse cursor to the specified absolute screen coordinates.",
        "Func_Name": "Mouse Move Absolute"
      },
      {
        "Func_Code": "function mousemoverel(x: number, y: number): ()",
        "Func_Description": "Moves the mouse cursor by a specified relative amount from its current position.",
        "Func_Name": "Mouse Move Relative"
      },
      {
        "Func_Code": "function mousescroll(pixels: number): ()",
        "Func_Description": "Performs a mouse scroll action by the specified number of pixels.",
        "Func_Name": "Mouse Scroll"
      }
    ]
  },
  {
    "Section_Desc": "This section provides functions for interacting with metatables, including accessing locked metatables and hooking metamethods.",
    "Section_Name": "Metatable Functions",
    "Funcs": [
      {
        "Func_Code": "function getrawmetatable(object: table): table",
        "Func_Description": "Returns the raw metatable of an object, bypassing the locked __metatable field.",
        "Func_Name": "Get Raw Metatable"
      },
      {
        "Func_Code": "function hookmetamethod(object: table, method: string, hook: function): function",
        "Func_Description": "Replaces the specified method with a hook function. Returns a new function to access the original method.",
        "Func_Name": "Hook Metamethod"
      },
      {
        "Func_Code": "function getnamecallmethod(): string",
        "Func_Description": "Returns the name of the method that triggered the __namecall metamethod.",
        "Func_Name": "Get Namecall Method"
      },
      {
        "Func_Code": "function isreadonly(object: table): boolean",
        "Func_Description": "Checks if the specified object is frozen or read-only, similar to table.isfrozen.",
        "Func_Name": "Is Read-Only"
      },
      {
        "Func_Code": "function setrawmetatable(object: table, metatable: table): ()",
        "Func_Description": "Sets the metatable of the specified object to a provided metatable, even if normally locked.",
        "Func_Name": "Set Raw Metatable"
      },
      {
        "Func_Code": "function setreadonly(object: table, readonly: boolean): ()",
        "Func_Description": "Defines whether the specified object is frozen or read-only.",
        "Func_Name": "Set Read-Only"
      }
    ]
  },
  {
    "Section_Desc": "This section provides functions for interacting with script environments, including accessing garbage-collected objects and loaded modules.",
    "Section_Name": "Script Functions",
    "Funcs": [
      {
        "Func_Code": "function getgc(includeTables: boolean?): {function | userdata | table}",
        "Func_Description": "Returns a list of objects in the Luau garbage collector, optionally including tables.",
        "Func_Name": "Get Garbage Collector"
      },
      {
        "Func_Code": "function getgenv(): { [string]: any }",
        "Func_Description": "Returns the custom global environment of the executor, allowing the sharing of variables or functions between scripts.",
        "Func_Name": "Get Global Environment"
      },
      {
        "Func_Code": "function getloadedmodules(excludeCore: boolean?): {ModuleScript}",
        "Func_Description": "Returns a list of loaded ModuleScripts, with an option to exclude core modules.",
        "Func_Name": "Get Loaded Modules"
      },
      {
        "Func_Code": "function getrenv(): { [string]: any }",
        "Func_Description": "Retrieves the global environment of the game client, used for accessing global functions utilized by LocalScripts and ModuleScripts.",
        "Func_Name": "Get Roblox Environment"
      },
      {
        "Func_Code": "function getrunningscripts(): {LocalScript | ModuleScript}",
        "Func_Description": "Returns a list of currently running LocalScripts and ModuleScripts.",
        "Func_Name": "Get Running Scripts"
      },
      {
        "Func_Code": "function getscriptbytecode(script: LocalScript | ModuleScript): string",
        "Func_Description": "Returns the raw Luau bytecode of a specified script.",
        "Func_Name": "Get Script Bytecode"
      },
      {
        "Func_Code": "function getscriptclosure(script: LocalScript | ModuleScript): function",
        "Func_Description": "Generates a new closure using the specified script's bytecode.",
        "Func_Name": "Get Script Closure"
      },
      {
        "Func_Code": "function getscripthash(script: LocalScript | ModuleScript): string",
        "Func_Description": "Provides a SHA384 hash of a script's bytecode, useful for tracking source code changes.",
        "Func_Name": "Get Script Hash"
      },
      {
        "Func_Code": "function getscripts(): {LocalScript | ModuleScript}",
        "Func_Description": "Returns a list of every script in the game, including both LocalScripts and ModuleScripts.",
        "Func_Name": "Get Scripts"
      },
      {
        "Func_Code": "function getsenv(script: LocalScript | ModuleScript): { [string]: any }",
        "Func_Description": "Retrieves the global environment of a specified script, allowing access to non-local variables and functions.",
        "Func_Name": "Get Script Environment"
      },
      {
        "Func_Code": "function getthreadidentity(): number",
        "Func_Description": "Returns the identity level of the current thread.",
        "Func_Name": "Get Thread Identity"
      },
      {
        "Func_Code": "function setthreadidentity(identity: number): ()",
        "Func_Description": "Sets the identity level for the current thread.",
        "Func_Name": "Set Thread Identity"
      }
    ]
  },
  {
    "Section_Desc": "This section provides functions for interacting with WebSocket connections, including sending messages and handling events.",
    "Section_Name": "WebSocket Functions",
    "Funcs": [
      {
        "Func_Code": "function WebSocket.connect(url: string): WebSocket",
        "Func_Description": "Establishes a WebSocket connection to the specified URL.",
        "Func_Name": "Connect"
      },
      {
        "Func_Code": "WebSocket:Send(message: string): ()",
        "Func_Description": "Sends a message over the WebSocket connection.",
        "Func_Name": "Send Message"
      },
      {
        "Func_Code": "WebSocket:Close(): ()",
        "Func_Description": "Closes the WebSocket connection.",
        "Func_Name": "Close Connection"
      }
    ]
  },
  {
    "Section_Desc": "This section provides a temporary collection of functions that do not yet belong to a specific category.",
    "Section_Name": "Miscellaneous Functions",
    "Funcs": [
      {
        "Func_Code": "function identifyexecutor(): (string, string)",
        "Func_Description": "Returns the name and version of the current executor.",
        "Func_Name": "Identify Executor"
      },
      {
        "Func_Code": "function lz4compress(data: string): string",
        "Func_Description": "Compresses data using LZ4 compression.",
        "Func_Name": "LZ4 Compress"
      },
      {
        "Func_Code": "function lz4decompress(data: string, size: number): string",
        "Func_Description": "Decompresses data using LZ4 compression, with the decompressed size specified by the size parameter.",
        "Func_Name": "LZ4 Decompress"
      },
      {
        "Func_Code": "function messagebox(text: string, caption: string, flags: number): number",
        "Func_Description": "Displays a message box with the specified text, caption, and flags, yielding until the box is closed and returning a user input code.",
        "Func_Name": "Message Box"
      },
      {
        "Func_Code": "function queue_on_teleport(code: string): ()",
        "Func_Description": "Queues a specified script to be executed after the player teleports to a different place.",
        "Func_Name": "Queue On Teleport"
      },
      {
        "Func_Code": "function request(options: HttpRequest): HttpResponse",
        "Func_Description": "Sends an HTTP request with specified options, yielding until the request completes and returning the response.",
        "Func_Name": "Request"
      },
      {
        "Func_Code": "function setclipboard(text: string): ()",
        "Func_Description": "Copies the specified text to the clipboard.",
        "Func_Name": "Set Clipboard"
      },
      {
        "Func_Code": "function setfpscap(fps: number): ()",
        "Func_Description": "Sets the in-game FPS cap to the specified value; if set to 0, the FPS cap is disabled.",
        "Func_Name": "Set FPS Cap"
      }
    ]
  }
]
