[
  {
    "Section_Desc": "This section contains various functions related to environment manipulation, hidden properties, and game data retrieval, allowing access to both public and private objects and their properties within the game environment.",
    "Section_Name": "Environment Functions",
    "Funcs": [
      {
        "Func_Code": "function loadstring<A...>(chunk: string): (((A...) -> any)?, string?)",
        "Func_Description": "Attempts to load chunk, returns a valid function if successful. If compilation fails, nil is returned alongside an error message.",
        "Func_Name": "Loadstring"
      },
      {
        "Func_Code": "function getthreadidentity(): number",
        "Func_Description": "Returns the identity for the current thread.",
        "Func_Name": "Get Identity"
      },
      {
        "Func_Code": "function getscriptfromthread(t: thread): Instance",
        "Func_Description": "Returns the script from the given thread, even if the script has been set to nil. Cosmo threads will return nil.",
        "Func_Name": "Get Script From Thread"
      },
      {
        "Func_Code": "function gethui(): Instance",
        "Func_Description": "Returns a hidden GUI container used to prevent detection from FindFirstChild. Does not trigger game.DescendantAdded.",
        "Func_Name": "Get Hidden UI"
      },
      {
        "Func_Code": "function getgenv(): {[string]: any}",
        "Func_Description": "Returns the Cosmo environment.",
        "Func_Name": "Get Global Environment"
      },
      {
        "Func_Code": "function getrenv(): {[string]: any}",
        "Func_Description": "Returns the global game environment.",
        "Func_Name": "Get Game Environment"
      },
      {
        "Func_Code": "function getreg(): {[any]: any}",
        "Func_Description": "Returns the Lua registry.",
        "Func_Name": "Get Registry"
      },
      {
        "Func_Code": "function getgc(include_tables: boolean): {[number]: function | userdata | {[any]: any}}",
        "Func_Description": "Returns the garbage collection table. Optionally includes tables.",
        "Func_Name": "Get Garbage Collection"
      },
      {
        "Func_Code": "function getsenv(script: (LocalScript | ModuleScript)): {[string]: any}",
        "Func_Description": "Returns the environment of the given script.",
        "Func_Name": "Get Script Environment"
      },
      {
        "Func_Code": "function getinstances(): {[number]: Instance}",
        "Func_Description": "Returns all instances in the client.",
        "Func_Name": "Get Instances"
      },
      {
        "Func_Code": "function getnilinstances(): {[number]: Instance}",
        "Func_Description": "Returns all instances that are parented to nil.",
        "Func_Name": "Get Nil Instances"
      },
      {
        "Func_Code": "function getconnections(signal: RbxScriptSignal): {[number]: Connection}",
        "Func_Description": "Returns a list of active connections to the specified signal.",
        "Func_Name": "Get Connections"
      },
      {
        "Func_Code": "function gethiddenproperty(object: Instance, property: string)",
        "Func_Description": "Returns the hidden property of the object. Currently supports BinaryString, SharedString.",
        "Func_Name": "Get Hidden Property"
      },
      {
        "Func_Code": "function getproperties(object: Instance): {[number]: string}",
        "Func_Description": "Returns an array of property names on the object.",
        "Func_Name": "Get Properties"
      },
      {
        "Func_Code": "function gethiddenproperties(object: Instance): {[number]: string}",
        "Func_Description": "Returns an array of hidden property names on the object.",
        "Func_Name": "Get Hidden Properties"
      },
      {
        "Func_Code": "function getscriptbytecode(script: Instance): string",
        "Func_Description": "Returns the Luau bytecode of the specified script.",
        "Func_Name": "Get Script Bytecode"
      },
      {
        "Func_Code": "function getscripthash(script: Instance): string",
        "Func_Description": "Returns the hashed bytecode of the given script. Useful for detecting changes in game scripts.",
        "Func_Name": "Get Script Hash"
      },
      {
        "Func_Code": "function getloadedmodules(filter: boolean): {[number]: ModuleScript}",
        "Func_Description": "Returns all loaded ModuleScripts. If filter is false, it will include core items.",
        "Func_Name": "Get Loaded Modules"
      },
      {
        "Func_Code": "function getcustomasset(filename: string, preventcache: bool?): string",
        "Func_Description": "Generates a custom content-id from the filename, allowing you to load content from the workspace folder. Optionally, prevent cache for reloading.",
        "Func_Name": "Get Custom Asset"
      },
      {
        "Func_Code": "function getcallbackvalue(inst: Instance, callbackname: string)",
        "Func_Description": "Gets the callback function of the specified callback on the given instance.",
        "Func_Name": "Get Callback Value"
      }
    ]
  },
  {
    "Section_Desc": "Functions related to metatable manipulation.",
    "Section_Name": "Metatable Functions",
    "Funcs": [
      {
        "Func_Code": "function getrawmetatable(obj: any): table",
        "Func_Description": "Returns the metatable value of obj, bypassing the __metatable field.",
        "Func_Name": "Get Raw Metatable"
      },
      {
        "Func_Code": "function setrawmetatable(obj: any, mt: table)",
        "Func_Description": "Sets the metatable of obj to mt.",
        "Func_Name": "Set Raw Metatable"
      },
      {
        "Func_Code": "function setreadonly(t: table, state: boolean)",
        "Func_Description": "Sets the read-only state of t to state, defining whether it can be written to or not.",
        "Func_Name": "Set Read-Only"
      },
      {
        "Func_Code": "function isreadonly(t: table): boolean",
        "Func_Description": "Returns the read-only state of t.",
        "Func_Name": "Is Read-Only"
      },
      {
        "Func_Code": "function iswritable(t: table): boolean",
        "Func_Description": "Returns true if t is writable (not read-only).",
        "Func_Name": "Is Writable"
      },
      {
        "Func_Code": "function makewritable(t: table)",
        "Func_Description": "Makes t writable by setting its read-only state to false.",
        "Func_Name": "Make Writable"
      },
      {
        "Func_Code": "function makereadonly(t: table)",
        "Func_Description": "Makes t read-only by setting its read-only state to true.",
        "Func_Name": "Make Read-Only"
      },
      {
        "Func_Code": "function hookmetamethod(obj: (table | userdata), metamethod: string, replacement: function): function",
        "Func_Description": "Hooks the given metamethod with a replacement function, returns the original function.",
        "Func_Name": "Hook Metamethod"
      },
      {
        "Func_Code": "function hookfunction(old: function, hook: function): function",
        "Func_Description": "Hooks the specified function with the hook function and returns the original.",
        "Func_Name": "Hook Function"
      }
    ]
  },
  {
    "Section_Desc": "Functions related to input manipulation, including mouse and keyboard input.",
    "Section_Name": "Input Functions",
    "Funcs": [
      {
        "Func_Code": "function isrbxactive(): boolean",
        "Func_Description": "Returns true if the main window is in focus. The main window must be focused for other input functions to work.",
        "Func_Name": "Is Active"
      },
      {
        "Func_Code": "function keypress(key: number)",
        "Func_Description": "Performs a key press with the provided key.",
        "Func_Name": "Key Press"
      },
      {
        "Func_Code": "function keyrelease(key: number)",
        "Func_Description": "Performs a key release with the provided key.",
        "Func_Name": "Key Release"
      },
      {
        "Func_Code": "function mouse1click()",
        "Func_Description": "Stimulates a full left mouse click (press and release).",
        "Func_Name": "Mouse1 Click"
      },
      {
        "Func_Code": "function mouse1press()",
        "Func_Description": "Stimulates a left mouse press (button is pressed but not released).",
        "Func_Name": "Mouse1 Press"
      },
      {
        "Func_Code": "function mouse1release()",
        "Func_Description": "Stimulates a left mouse release (button is released after being pressed).",
        "Func_Name": "Mouse1 Release"
      },
      {
        "Func_Code": "function mouse2click()",
        "Func_Description": "Stimulates a full right mouse click (press and release).",
        "Func_Name": "Mouse2 Click"
      },
      {
        "Func_Code": "function mouse2press()",
        "Func_Description": "Stimulates a right mouse press (button is pressed but not released).",
        "Func_Name": "Mouse2 Press"
      },
      {
        "Func_Code": "function mouse2release()",
        "Func_Description": "Stimulates a right mouse release (button is released after being pressed).",
        "Func_Name": "Mouse2 Release"
      }
    ]
  },
  {
    "Section_Desc": "Functions related to controlling console behavior, including printing and clearing console output.",
    "Section_Name": "Console Functions",
    "Funcs": [
      {
        "Func_Code": "function printconsole(str: string, color: (Color3 | number)?)",
        "Func_Description": "Prints the provided string to the console with the specified color, if provided.",
        "Func_Name": "Print to Console"
      },
      {
        "Func_Code": "function rconsoleprint(str: string)",
        "Func_Description": "Prints the provided string to the console.",
        "Func_Name": "Console Print"
      },
      {
        "Func_Code": "function rconsoleinfo(str: string)",
        "Func_Description": "Prints the provided string to the console with an 'Info' tag.",
        "Func_Name": "Console Info"
      },
      {
        "Func_Code": "function rconsolewarn(str: string)",
        "Func_Description": "Prints the provided string to the console with a 'Warning' tag.",
        "Func_Name": "Console Warn"
      },
      {
        "Func_Code": "function rconsoleerr(str: string)",
        "Func_Description": "Prints the provided string to the console with an 'Error' tag.",
        "Func_Name": "Console Error"
      },
      {
        "Func_Code": "function rconsolename(name: string)",
        "Func_Description": "Sets the title of the console window.",
        "Func_Name": "Set Console Name"
      },
      {
        "Func_Code": "function rconsoleclear()",
        "Func_Description": "Clears all output from the console window.",
        "Func_Name": "Clear Console"
      }
    ]
  },
  {
    "Section_Desc": "Miscellaneous utility functions for debugging and accessing closure data.",
    "Section_Name": "Misc Functions",
    "Funcs": [
      {
        "Func_Code": "function getupvalues(fn: function): {[number]: any}",
        "Func_Description": "Returns the upvalues of the provided function.",
        "Func_Name": "Get Upvalues"
      },
      {
        "Func_Code": "function getupvalue(fn: function, i: number): any",
        "Func_Description": "Returns the i-th upvalue of the provided function.",
        "Func_Name": "Get Upvalue"
      },
      {
        "Func_Code": "function setupvalue(fn: function, i: number, value: any)",
        "Func_Description": "Sets the i-th upvalue of the provided function to the given value.",
        "Func_Name": "Set Upvalue"
      },
      {
        "Func_Code": "function debug.getconstants(fn: function): {[number]: any}",
        "Func_Description": "Returns the constants of the given function.",
        "Func_Name": "Get Constants"
      },
      {
        "Func_Code": "function debug.getconstant(fn: function, i: number): any",
        "Func_Description": "Returns the i-th constant of the provided function.",
        "Func_Name": "Get Constant"
      },
      {
        "Func_Code": "function debug.setconstant(fn: function, i: number, value: any)",
        "Func_Description": "Sets the i-th constant of the provided function to the given value.",
        "Func_Name": "Set Constant"
      },
      {
        "Func_Code": "function getproto(fn: function, index: number): function",
        "Func_Description": "Returns the i-th prototype (sub-function) of the provided function.",
        "Func_Name": "Get Prototype"
      },
      {
        "Func_Code": "function hookfunction(old: function, hook: function): function",
        "Func_Description": "Hooks the specified function with the hook function and returns the original.",
        "Func_Name": "Hook Function"
      },
      {
        "Func_Code": "function newcclosure(f: function): CClosure",
        "Func_Description": "Returns a new C closure function.",
        "Func_Name": "New C Closure"
      }
    ]
  },
  {
    "Section_Desc": "Functions related to manipulating and accessing files on the local system.",
    "Section_Name": "Filesystem Functions",
    "Funcs": [
      {
        "Func_Code": "function isfile(filename: string): boolean",
        "Func_Description": "Returns true if the specified file exists.",
        "Func_Name": "Is File"
      },
      {
        "Func_Code": "function isfolder(foldername: string): boolean",
        "Func_Description": "Returns true if the specified folder exists.",
        "Func_Name": "Is Folder"
      },
      {
        "Func_Code": "function makefolder(foldername: string)",
        "Func_Description": "Creates the specified folder.",
        "Func_Name": "Make Folder"
      },
      {
        "Func_Code": "function delfolder(foldername: string)",
        "Func_Description": "Deletes the specified folder.",
        "Func_Name": "Delete Folder"
      },
      {
        "Func_Code": "function listfiles(foldername: string): {[number]: string}",
        "Func_Description": "Returns a list of files in the specified folder.",
        "Func_Name": "List Files"
      },
      {
        "Func_Code": "function writefile(filename: string, content: string)",
        "Func_Description": "Writes content to the specified file.",
        "Func_Name": "Write File"
      },
      {
        "Func_Code": "function appendfile(filename: string, content: string)",
        "Func_Description": "Appends content to the specified file.",
        "Func_Name": "Append to File"
      },
      {
        "Func_Code": "function delfile(filename: string)",
        "Func_Description": "Deletes the specified file.",
        "Func_Name": "Delete File"
      },
      {
        "Func_Code": "function readfile(filename: string): string",
        "Func_Description": "Reads and returns the content of the specified file.",
        "Func_Name": "Read File"
      }
    ]
  },
  {
    "Section_Desc": "Functions for handling HTTP requests and networking.",
    "Section_Name": "Network Functions",
    "Funcs": [
      {
        "Func_Code": "function http.request(requestOptions: {[string]: any}): {[string]: any}",
        "Func_Description": "Makes an HTTP request based on the provided options. Options include method, headers, and body.",
        "Func_Name": "HTTP Request"
      },
      {
        "Func_Code": "function http.get(url: string, headers: {[string]: string}): string",
        "Func_Description": "Sends a GET request to the specified URL.",
        "Func_Name": "HTTP GET"
      },
      {
        "Func_Code": "function http.post(url: string, body: string, headers: {[string]: string}): string",
        "Func_Description": "Sends a POST request to the specified URL.",
        "Func_Name": "HTTP POST"
      },
      {
        "Func_Code": "function websockets.connect(url: string): WebSocket",
        "Func_Description": "Opens a WebSocket connection to the specified URL.",
        "Func_Name": "WebSocket Connect"
      }
    ]
  }
]
