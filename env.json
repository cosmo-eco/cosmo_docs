[
  {
    "Section_Desc": "This section provides functions for interacting with the console window, including clearing output, setting the title, and printing text.",
    "Section_Name": "Console Functions",
    "Funcs": [
      {
        "Func_Code": "function rconsoleclear(): ()",
        "Func_Description": "Clears the output of the console window.",
        "Func_Name": "Clear Console"
      },
      {
        "Func_Code": "function rconsolecreate(): ()",
        "Func_Description": "Opens the console window without clearing previous output.",
        "Func_Name": "Create Console"
      },
      {
        "Func_Code": "function rconsoledestroy(): ()",
        "Func_Description": "Closes the console window and clears its output, but retains the title.",
        "Func_Name": "Destroy Console"
      },
      {
        "Func_Code": "function rconsoleinput(): string",
        "Func_Description": "Waits for user input into the console window and returns the result.",
        "Func_Name": "Console Input"
      },
      {
        "Func_Code": "function rconsoleprint(text: string): ()",
        "Func_Description": "Prints the provided text to the console window without clearing previous output or adding a new line.",
        "Func_Name": "Print to Console"
      },
      {
        "Func_Code": "function rconsolesettitle(title: string): ()",
        "Func_Description": "Sets the title of the console window to the specified title.",
        "Func_Name": "Set Console Title"
      }
    ]
  },
  {
    "Section_Desc": "This section provides functions for modifying the internal Instance cache, allowing for invalidation, replacement, and comparison of cached Instances.",
    "Section_Name": "Cache Functions",
    "Funcs": [
      {
        "Func_Code": "function invalidate(object: Instance): ()",
        "Func_Description": "Deletes the object from the Instance cache, effectively invalidating it as a reference.",
        "Func_Name": "Invalidate Cache"
      },
      {
        "Func_Code": "function iscached(object: Instance): boolean",
        "Func_Description": "Checks whether the object exists in the Instance cache.",
        "Func_Name": "Is Cached"
      },
      {
        "Func_Code": "function replace(object: Instance, newObject: Instance): ()",
        "Func_Description": "Replaces the object in the Instance cache with a new object.",
        "Func_Name": "Replace in Cache"
      },
      {
        "Func_Code": "function cloneref(object: Instance): Instance",
        "Func_Description": "Returns a copy of the Instance reference to the object, useful for managing an Instance without directly referencing it.",
        "Func_Name": "Clone Reference"
      },
      {
        "Func_Code": "function compareinstances(a: Instance, b: Instance): boolean",
        "Func_Description": "Returns whether both objects reference the same Instance.",
        "Func_Name": "Compare Instances"
      }
    ]
  },
  {
    "Section_Desc": "This section provides functions for creating, identifying, and interacting with Luau closures, including checking caller information, cloning functions, and hooking closures.",
    "Section_Name": "Closure Functions",
    "Funcs": [
      {
        "Func_Code": "function checkcaller(): boolean",
        "Func_Description": "Returns whether the function currently running was called by the executor. Useful for hooks that behave differently when called by the game.",
        "Func_Name": "Check Caller"
      },
      {
        "Func_Code": "function clonefunction<T>(func: T): T",
        "Func_Description": "Generates a new closure based on the bytecode of the provided function.",
        "Func_Name": "Clone Function"
      },
      {
        "Func_Code": "function getcallingscript(): BaseScript",
        "Func_Description": "Returns the script responsible for the currently running function.",
        "Func_Name": "Get Calling Script"
      },
      {
        "Func_Code": "function hookfunction<T>(func: T, hook: function): T",
        "Func_Description": "Replaces the provided function with a hook, invoking the hook instead of the original function. Returns a new function to access the original.",
        "Func_Name": "Hook Function"
      },
      {
        "Func_Code": "function iscclosure(func: function): boolean",
        "Func_Description": "Returns whether the provided function is a C closure.",
        "Func_Name": "Is C Closure"
      },
      {
        "Func_Code": "function islclosure(func: function): boolean",
        "Func_Description": "Returns whether the provided function is a Luau closure.",
        "Func_Name": "Is Luau Closure"
      },
      {
        "Func_Code": "function isexecutorclosure(func: function): boolean",
        "Func_Description": "Returns whether the provided function was created by the executor.",
        "Func_Name": "Is Executor Closure"
      },
      {
        "Func_Code": "function loadstring(source: string, chunkname: string?): (function?, string?)",
        "Func_Description": "Compiles a source string into a function. Returns the function if successful, or an error message if there are compilation errors.",
        "Func_Name": "Load String"
      },
      {
        "Func_Code": "function newcclosure<T>(func: T): T",
        "Func_Description": "Wraps a function as a C closure, which may have different metadata but behaves identically.",
        "Func_Name": "New C Closure"
      }
    ]
  },
  {
    "Section_Desc": "This section provides functions for interacting with Luau constants in a function.",
    "Section_Name": "Debug Functions",
    "Funcs": [
      {
        "Func_Code": "function debug.getconstant(func: function | number, index: number): any",
        "Func_Description": "Returns the constant at index in the constant table of the function or level. Throws an error if the constant does not exist.",
        "Func_Name": "Get Constant"
      },
      {
        "Func_Code": "function debug.getconstants(func: function | number): {any}",
        "Func_Description": "Returns the constant table of the function or level.",
        "Func_Name": "Get Constants"
      }
    ]
  },
  {
    "Section_Desc": "This section contains functions for encryption and decryption, including Base64 encoding and decoding.",
    "Section_Name": "Crypt Functions",
    "Funcs": [
      {
        "Func_Code": "function crypt.base64encode(data: string): string",
        "Func_Description": "Encodes a string of bytes into Base64.",
        "Func_Name": "Base64 Encode"
      },
      {
        "Func_Code": "function crypt.base64decode(data: string): string",
        "Func_Description": "Decodes a Base64 string to a string of bytes.",
        "Func_Name": "Base64 Decode"
      }
    ]
  },
  {
    "Section_Desc": "This section provides functions for file and folder operations within the executor's directory, allowing reading, writing, and listing files.",
    "Section_Name": "Filesystem Functions",
    "Funcs": [
      {
        "Func_Code": "function readfile(path: string): string",
        "Func_Description": "Returns the contents of the file located at the specified path.",
        "Func_Name": "Read File"
      },
      {
        "Func_Code": "function listfiles(path: string): {string}",
        "Func_Description": "Returns a list of files and folders in the specified folder. The returned list contains whole paths.",
        "Func_Name": "List Files"
      },
      {
        "Func_Code": "function writefile(path: string, content: string)",
        "Func_Description": "Writes the provided content to the file at the specified path.",
        "Func_Name": "Write File"
      }
    ]
  },
  {
    "Section_Desc": "This section provides functions for drawing shapes and text above the game window.",
    "Section_Name": "Drawing Functions",
    "Funcs": [
      {
        "Func_Code": "function Drawing.new(type: string): Drawing",
        "Func_Description": "Creates a new drawing object of the specified type. Types include 'Line', 'Text', 'Image', 'Circle', 'Square', 'Quad', and 'Triangle'.",
        "Func_Name": "New Drawing"
      },
      {
        "Func_Code": "Drawing.Fonts: {UI: 0, System: 1, Plex: 2, Monospace: 3}",
        "Func_Description": "A table containing the available font names. Font style may vary depending on the executor.",
        "Func_Name": "Fonts"
      }
    ]
  },
  {
    "Section_Desc": "This section provides functions for interacting with game objects (instances) and their properties.",
    "Section_Name": "Instance Functions",
    "Funcs": [
      {
        "Func_Code": "function fireclickdetector(object: ClickDetector, distance: number?, event: string?): ()",
        "Func_Description": "Dispatches a click or hover event to the given ClickDetector. The 'distance' defaults to zero, and 'event' defaults to 'MouseClick' if not provided.",
        "Func_Name": "Fire Click Detector"
      },
      {
        "Func_Code": "function getcallbackvalue(object: Instance, property: string): function?",
        "Func_Description": "Returns the function assigned to a callback property of the object, which cannot be indexed normally.",
        "Func_Name": "Get Callback Value"
      }
    ]
  },
  {
    "Section_Desc": "This section provides functions for simulating user inputs such as mouse clicks and key presses.",
    "Section_Name": "Input Functions",
    "Funcs": [
      {
        "Func_Code": "function isrbxactive(): boolean",
        "Func_Description": "Returns whether the game's window is in focus. Must be true for other input functions to work.",
        "Func_Name": "Is Active"
      },
      {
        "Func_Code": "function mouse1click(): ()",
        "Func_Description": "Dispatches a left mouse button click.",
        "Func_Name": "Mouse1 Click"
      },
      {
        "Func_Code": "function mouse1press(): ()",
        "Func_Description": "Dispatches a left mouse button press.",
        "Func_Name": "Mouse1 Press"
      },
      {
        "Func_Code": "function mouse1release(): ()",
        "Func_Description": "Dispatches a left mouse button release.",
        "Func_Name": "Mouse1 Release"
      },
      {
        "Func_Code": "function mouse2click(): ()",
        "Func_Description": "Dispatches a right mouse button click.",
        "Func_Name": "Mouse2 Click"
      },
      {
        "Func_Code": "function mouse2press(): ()",
        "Func_Description": "Dispatches a right mouse button press.",
        "Func_Name": "Mouse2 Press"
      },
      {
        "Func_Code": "function mouse2release(): ()",
        "Func_Description": "Dispatches a right mouse button release.",
        "Func_Name": "Mouse2 Release"
      }
    ]
  },
  {
    "Section_Desc": "This section provides functions for interacting with metatables, including accessing locked metatables and hooking metamethods.",
    "Section_Name": "Metatable Functions",
    "Funcs": [
      {
        "Func_Code": "function getrawmetatable(object: table): table",
        "Func_Description": "Returns the raw metatable of an object, bypassing the locked __metatable field.",
        "Func_Name": "Get Raw Metatable"
      },
      {
        "Func_Code": "function hookmetamethod(object: table, method: string, hook: function): function",
        "Func_Description": "Replaces the specified method with a hook function. Returns a new function to access the original method.",
        "Func_Name": "Hook Metamethod"
      }
    ]
  },
  {
    "Section_Desc": "This section provides functions for interacting with script environments, including accessing garbage-collected objects and loaded modules.",
    "Section_Name": "Script Functions",
    "Funcs": [
      {
        "Func_Code": "function getgc(includeTables: boolean?): {function | userdata | table}",
        "Func_Description": "Returns a list of objects in the Luau garbage collector. Optionally includes tables.",
        "Func_Name": "Get Garbage Collector"
      },
      {
        "Func_Code": "function getgenv(): { [string]: any }",
        "Func_Description": "Returns the custom global environment of the executor, allowing the sharing of variables or functions between scripts.",
        "Func_Name": "Get Global Environment"
      },
      {
        "Func_Code": "function getloadedmodules(excludeCore: boolean?): {ModuleScript}",
        "Func_Description": "Returns a list of ModuleScripts that have been loaded. Optionally excludes core modules.",
        "Func_Name": "Get Loaded Modules"
      }
    ]
  },
  {
    "Section_Desc": "This section provides functions for interacting with WebSocket connections, including sending messages and handling events.",
    "Section_Name": "WebSocket Functions",
    "Funcs": [
      {
        "Func_Code": "function WebSocket.connect(url: string): WebSocket",
        "Func_Description": "Establishes a WebSocket connection to the specified URL.",
        "Func_Name": "Connect"
      },
      {
        "Func_Code": "WebSocket:Send(message: string): ()",
        "Func_Description": "Sends a message over the WebSocket connection.",
        "Func_Name": "Send Message"
      },
      {
        "Func_Code": "WebSocket:Close(): ()",
        "Func_Description": "Closes the WebSocket connection.",
        "Func_Name": "Close Connection"
      }
    ]
  }
]
